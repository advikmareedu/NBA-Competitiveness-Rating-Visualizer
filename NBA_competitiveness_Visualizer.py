# -*- coding: utf-8 -*-
"""Math164 - YearComparisonFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11uBWK3F3fnLyG60mnRDHzvotF5SGtol5
"""

import matplotlib.pyplot as plt
import pandas as pd
#installing nba_api required to run code
!pip install nba_api
from nba_api.stats.endpoints import TeamGameLogs

def compCalc(df):
  df['COMP_RATING'] = (df['BLK'] * 30) + (df['STL'] * 20) + (df['OREB'] * 15) + (df['DREB'] * 2.5) + (df['PF'] * 2.5) + (df['2FGMADE'] * 1) + (df['FG3M'] * 1.5) + (df['2FGMISSED'] * 1) + (df['FG3MISSED'] * 0.75) + (df['AST'] * 0.5)

  return df

#Warning: sometimes need to rerun because API crashes ocassionally
avgCompDF = pd.DataFrame(columns = ['Year', 'Competitiveness'])

#loop for nba years
for i in range(1983, 2023):
  yearStr = str(i) + "-" + str(i+1)[2:4]

  for x in range(99999): #loop used to increase time between requests for data
    x = x + 0.5

  gamedatapull = TeamGameLogs(
        league_id_nullable ='00', # nba 00, g_league 20, wnba 10
        team_id_nullable = '', # can specify a specific team_id
        season_nullable = str(yearStr),
        season_type_nullable = 'Regular Season' # Regular Season, Playoffs, Pre Season
    )
  df = gamedatapull.get_data_frames()[0]
  df = pd.DataFrame(df)
  #we now have dataframe


  #reversing so that it is in chronological order
  df = df.iloc[::-1]
  df['DATE'] = pd.to_datetime(df['GAME_DATE'])

  #filtering so we only have relevant columns
  df = df.filter(items = ['SEASON_YEAR', 'TEAM_ID', 'TEAM_ABBREVIATION', 'TEAM_NAME', 'GAME_ID', 'FGM', 'FGA', 'FG3M', 'FG3A', 'FTM', 'FTA', 'OREB', 'DREB', 'REB', 'AST', 'TOV', 'STL', 'BLK', 'PF', 'PTS', 'DATE'])


  #adding relevant columns for weighting
  df['2FGMADE'] = df['FGM'] - df['FG3M']
  df['2FGMISSED'] = df['FGA'] - df["FG3A"] - df['2FGMADE']
  df['FG3MISSED'] = df['FG3A'] - df['FG3M']

  #using competitive rating model
  df = compCalc(df)

  avgRating = df['COMP_RATING'].mean()

  newEntry = {'Year':str(yearStr), 'Competitiveness': avgRating}
  avgCompDF.loc[len(avgCompDF)] = newEntry
  print(avgRating)


print(str(avgCompDF))

import matplotlib.ticker as ticker

#Code to create main competitiveness vs NBA season graph
fig, ax = plt.subplots()

plt.plot(avgCompDF['Year'],avgCompDF['Competitiveness'])

ax.set_xlabel('NBA Season')
ax.set_ylabel('Competitiveness')

ax.set_title('Competitiveness Rating for NBA Seasons Since 1982-1983')


every_nth = 6
for n, label in enumerate(ax.xaxis.get_ticklabels()):
    if n % every_nth != 0:
        label.set_visible(False)


#Main modeling ends here, all the following code is for producing graphs in relation to analysis and strength testing

#This block of code is copied from above and altered to be able to produce relevant graphs for analysis
#Warning: sometimes need to rerun because API crashes ocassionally
avgCompDF = pd.DataFrame(columns = ['Year', 'Competitiveness', 'Points', 'OREBS', 'DREBS', 'Steals', 'Blocks', 'Assists', '3FGMade', '2FGMade'])

#loop for nba years
for i in range(1983, 2023):
  yearStr = str(i) + "-" + str(i+1)[2:4]

  for x in range(99999): #loop used to increase time in between requests
    x = x + 0.5


  gamedatapull = TeamGameLogs(
        league_id_nullable ='00', # nba 00, g_league 20, wnba 10
        team_id_nullable = '', # can specify a specific team_id
        season_nullable = str(yearStr),
        season_type_nullable = 'Regular Season' # Regular Season, Playoffs, Pre Season
    )
  df = gamedatapull.get_data_frames()[0]
  df = pd.DataFrame(df)
  #we now have dataframe


  #reversing so that it is in chronological order
  df = df.iloc[::-1]
  df['DATE'] = pd.to_datetime(df['GAME_DATE'])

  #filtering so we only have relevant columns
  df = df.filter(items = ['SEASON_YEAR', 'TEAM_ID', 'TEAM_ABBREVIATION', 'TEAM_NAME', 'GAME_ID', 'FGM', 'FGA', 'FG3M', 'FG3A', 'FTM', 'FTA', 'OREB', 'DREB', 'REB', 'AST', 'TOV', 'STL', 'BLK', 'PF', 'PTS', 'DATE'])


  #adding relevant columns for weighting
  df['2FGMADE'] = df['FGM'] - df['FG3M']
  df['2FGMISSED'] = df['FGA'] - df["FG3A"] - df['2FGMADE']
  df['FG3MISSED'] = df['FG3A'] - df['FG3M']

  #using competitive rating model
  df = compCalc(df)

  avgRating = df['COMP_RATING'].mean()

  #for graphing stats
  avgPts = df['PTS'].mean()
  avgORebs = df['OREB'].mean()
  avgDRebs = df['DREB'].mean()
  avgSteals = df['STL'].mean()
  avgAST = df['AST'].mean()
  avgBLKS = df['BLK'].mean()
  avg3PTM = df['FG3M'].mean()
  avg2PTM = df['2FGMADE'].mean()


  newEntry = {'Year':str(yearStr), 'Competitiveness': avgRating, 'Points': avgPts, 'OREBS': avgORebs, 'DREBS': avgDRebs, 'Steals': avgSteals, 'Blocks': avgBLKS, 'Assists': avgAST, '3FGMade': avg3PTM, '2FGMade': avg2PTM}
  avgCompDF.loc[len(avgCompDF)] = newEntry
  print(avgRating)

avgCompDF.head()

fig, ax = plt.subplots()

plt.plot(avgCompDF['Year'],avgCompDF['Points'])

ax.set_xlabel('NBA Season')
ax.set_ylabel('Average Points')

ax.set_title('Average Points for NBA Seasons Since 1982-1983')


every_nth = 6
for n, label in enumerate(ax.xaxis.get_ticklabels()):
    if n % every_nth != 0:
        label.set_visible(False)

fig, ax = plt.subplots()

plt.plot(avgCompDF['Year'],avgCompDF['OREBS'])

ax.set_xlabel('NBA Season')
ax.set_ylabel('Average Offensive Rebounds')

ax.set_title('Average Offensive Rebounds for NBA Seasons Since 1982-1983')


every_nth = 6
for n, label in enumerate(ax.xaxis.get_ticklabels()):
    if n % every_nth != 0:
        label.set_visible(False)

fig, ax = plt.subplots()

plt.plot(avgCompDF['Year'],avgCompDF['DREBS'])

ax.set_xlabel('NBA Season')
ax.set_ylabel('Average Defensive Rebounds')

ax.set_title('Average Defensive Rebounds for NBA Seasons Since 1982-1983')


every_nth = 6
for n, label in enumerate(ax.xaxis.get_ticklabels()):
    if n % every_nth != 0:
        label.set_visible(False)

fig, ax = plt.subplots()

plt.plot(avgCompDF['Year'],avgCompDF['Steals'])

ax.set_xlabel('NBA Season')
ax.set_ylabel('Average Steals')

ax.set_title('Average Steals for NBA Seasons Since 1982-1983')


every_nth = 6
for n, label in enumerate(ax.xaxis.get_ticklabels()):
    if n % every_nth != 0:
        label.set_visible(False)

fig, ax = plt.subplots()

plt.plot(avgCompDF['Year'],avgCompDF['Blocks'])

ax.set_xlabel('NBA Season')
ax.set_ylabel('Average Blocks')

ax.set_title('Average Blocks for NBA Seasons Since 1982-1983')


every_nth = 6
for n, label in enumerate(ax.xaxis.get_ticklabels()):
    if n % every_nth != 0:
        label.set_visible(False)

fig, ax = plt.subplots()

plt.plot(avgCompDF['Year'],avgCompDF['Assists'])

ax.set_xlabel('NBA Season')
ax.set_ylabel('Average Assits')

ax.set_title('Average Assists for NBA Seasons Since 1982-1983')


every_nth = 6
for n, label in enumerate(ax.xaxis.get_ticklabels()):
    if n % every_nth != 0:
        label.set_visible(False)